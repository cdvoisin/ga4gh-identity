// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: builder.proto

package builder

/*
Package builder provides protocol buffer versions of some of the top-level
types from the ga4gh package, allowing builder.Build the ability to build
'real' versions of these messages from their protocol buffer counterparts.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parser struct {
	Shims                []*Shim           `protobuf:"bytes,1,rep,name=shims,proto3" json:"shims,omitempty"`
	Issuers              map[string]string `protobuf:"bytes,2,rep,name=issuers,proto3" json:"issuers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Parser) Reset()         { *m = Parser{} }
func (m *Parser) String() string { return proto.CompactTextString(m) }
func (*Parser) ProtoMessage()    {}
func (*Parser) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{0}
}
func (m *Parser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parser.Unmarshal(m, b)
}
func (m *Parser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parser.Marshal(b, m, deterministic)
}
func (dst *Parser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parser.Merge(dst, src)
}
func (m *Parser) XXX_Size() int {
	return xxx_messageInfo_Parser.Size(m)
}
func (m *Parser) XXX_DiscardUnknown() {
	xxx_messageInfo_Parser.DiscardUnknown(m)
}

var xxx_messageInfo_Parser proto.InternalMessageInfo

func (m *Parser) GetShims() []*Shim {
	if m != nil {
		return m.Shims
	}
	return nil
}

func (m *Parser) GetIssuers() map[string]string {
	if m != nil {
		return m.Issuers
	}
	return nil
}

type Shim struct {
	// Types that are valid to be assigned to Shim:
	//	*Shim_Elixir_
	Shim                 isShim_Shim `protobuf_oneof:"shim"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Shim) Reset()         { *m = Shim{} }
func (m *Shim) String() string { return proto.CompactTextString(m) }
func (*Shim) ProtoMessage()    {}
func (*Shim) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{1}
}
func (m *Shim) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shim.Unmarshal(m, b)
}
func (m *Shim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shim.Marshal(b, m, deterministic)
}
func (dst *Shim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shim.Merge(dst, src)
}
func (m *Shim) XXX_Size() int {
	return xxx_messageInfo_Shim.Size(m)
}
func (m *Shim) XXX_DiscardUnknown() {
	xxx_messageInfo_Shim.DiscardUnknown(m)
}

var xxx_messageInfo_Shim proto.InternalMessageInfo

type isShim_Shim interface {
	isShim_Shim()
}

type Shim_Elixir_ struct {
	Elixir *Shim_Elixir `protobuf:"bytes,1,opt,name=elixir,proto3,oneof"`
}

func (*Shim_Elixir_) isShim_Shim() {}

func (m *Shim) GetShim() isShim_Shim {
	if m != nil {
		return m.Shim
	}
	return nil
}

func (m *Shim) GetElixir() *Shim_Elixir {
	if x, ok := m.GetShim().(*Shim_Elixir_); ok {
		return x.Elixir
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Shim) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Shim_OneofMarshaler, _Shim_OneofUnmarshaler, _Shim_OneofSizer, []interface{}{
		(*Shim_Elixir_)(nil),
	}
}

func _Shim_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Shim)
	// shim
	switch x := m.Shim.(type) {
	case *Shim_Elixir_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Elixir); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Shim.Shim has unexpected type %T", x)
	}
	return nil
}

func _Shim_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Shim)
	switch tag {
	case 1: // shim.elixir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Shim_Elixir)
		err := b.DecodeMessage(msg)
		m.Shim = &Shim_Elixir_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Shim_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Shim)
	// shim
	switch x := m.Shim.(type) {
	case *Shim_Elixir_:
		s := proto.Size(x.Elixir)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Shim_Elixir struct {
	ClientId             string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shim_Elixir) Reset()         { *m = Shim_Elixir{} }
func (m *Shim_Elixir) String() string { return proto.CompactTextString(m) }
func (*Shim_Elixir) ProtoMessage()    {}
func (*Shim_Elixir) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{1, 0}
}
func (m *Shim_Elixir) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Shim_Elixir.Unmarshal(m, b)
}
func (m *Shim_Elixir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Shim_Elixir.Marshal(b, m, deterministic)
}
func (dst *Shim_Elixir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shim_Elixir.Merge(dst, src)
}
func (m *Shim_Elixir) XXX_Size() int {
	return xxx_messageInfo_Shim_Elixir.Size(m)
}
func (m *Shim_Elixir) XXX_DiscardUnknown() {
	xxx_messageInfo_Shim_Elixir.DiscardUnknown(m)
}

var xxx_messageInfo_Shim_Elixir proto.InternalMessageInfo

func (m *Shim_Elixir) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type Validator struct {
	// Types that are valid to be assigned to Validator:
	//	*Validator_And_
	//	*Validator_Or_
	//	*Validator_Simple_
	//	*Validator_Constant_
	Validator            isValidator_Validator `protobuf_oneof:"validator"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{2}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator.Unmarshal(m, b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
}
func (dst *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(dst, src)
}
func (m *Validator) XXX_Size() int {
	return xxx_messageInfo_Validator.Size(m)
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

type isValidator_Validator interface {
	isValidator_Validator()
}

type Validator_And_ struct {
	And *Validator_And `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}

type Validator_Or_ struct {
	Or *Validator_Or `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}

type Validator_Simple_ struct {
	Simple *Validator_Simple `protobuf:"bytes,3,opt,name=simple,proto3,oneof"`
}

type Validator_Constant_ struct {
	Constant *Validator_Constant `protobuf:"bytes,4,opt,name=constant,proto3,oneof"`
}

func (*Validator_And_) isValidator_Validator() {}

func (*Validator_Or_) isValidator_Validator() {}

func (*Validator_Simple_) isValidator_Validator() {}

func (*Validator_Constant_) isValidator_Validator() {}

func (m *Validator) GetValidator() isValidator_Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *Validator) GetAnd() *Validator_And {
	if x, ok := m.GetValidator().(*Validator_And_); ok {
		return x.And
	}
	return nil
}

func (m *Validator) GetOr() *Validator_Or {
	if x, ok := m.GetValidator().(*Validator_Or_); ok {
		return x.Or
	}
	return nil
}

func (m *Validator) GetSimple() *Validator_Simple {
	if x, ok := m.GetValidator().(*Validator_Simple_); ok {
		return x.Simple
	}
	return nil
}

func (m *Validator) GetConstant() *Validator_Constant {
	if x, ok := m.GetValidator().(*Validator_Constant_); ok {
		return x.Constant
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Validator) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Validator_OneofMarshaler, _Validator_OneofUnmarshaler, _Validator_OneofSizer, []interface{}{
		(*Validator_And_)(nil),
		(*Validator_Or_)(nil),
		(*Validator_Simple_)(nil),
		(*Validator_Constant_)(nil),
	}
}

func _Validator_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Validator)
	// validator
	switch x := m.Validator.(type) {
	case *Validator_And_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.And); err != nil {
			return err
		}
	case *Validator_Or_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Or); err != nil {
			return err
		}
	case *Validator_Simple_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Simple); err != nil {
			return err
		}
	case *Validator_Constant_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Constant); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Validator.Validator has unexpected type %T", x)
	}
	return nil
}

func _Validator_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Validator)
	switch tag {
	case 1: // validator.and
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Validator_And)
		err := b.DecodeMessage(msg)
		m.Validator = &Validator_And_{msg}
		return true, err
	case 2: // validator.or
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Validator_Or)
		err := b.DecodeMessage(msg)
		m.Validator = &Validator_Or_{msg}
		return true, err
	case 3: // validator.simple
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Validator_Simple)
		err := b.DecodeMessage(msg)
		m.Validator = &Validator_Simple_{msg}
		return true, err
	case 4: // validator.constant
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Validator_Constant)
		err := b.DecodeMessage(msg)
		m.Validator = &Validator_Constant_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Validator_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Validator)
	// validator
	switch x := m.Validator.(type) {
	case *Validator_And_:
		s := proto.Size(x.And)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Validator_Or_:
		s := proto.Size(x.Or)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Validator_Simple_:
		s := proto.Size(x.Simple)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Validator_Constant_:
		s := proto.Size(x.Constant)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Validator_And struct {
	Validators           []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Validator_And) Reset()         { *m = Validator_And{} }
func (m *Validator_And) String() string { return proto.CompactTextString(m) }
func (*Validator_And) ProtoMessage()    {}
func (*Validator_And) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{2, 0}
}
func (m *Validator_And) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_And.Unmarshal(m, b)
}
func (m *Validator_And) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_And.Marshal(b, m, deterministic)
}
func (dst *Validator_And) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_And.Merge(dst, src)
}
func (m *Validator_And) XXX_Size() int {
	return xxx_messageInfo_Validator_And.Size(m)
}
func (m *Validator_And) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_And.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_And proto.InternalMessageInfo

func (m *Validator_And) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator_Or struct {
	Validators           []*Validator `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Validator_Or) Reset()         { *m = Validator_Or{} }
func (m *Validator_Or) String() string { return proto.CompactTextString(m) }
func (*Validator_Or) ProtoMessage()    {}
func (*Validator_Or) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{2, 1}
}
func (m *Validator_Or) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_Or.Unmarshal(m, b)
}
func (m *Validator_Or) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_Or.Marshal(b, m, deterministic)
}
func (dst *Validator_Or) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_Or.Merge(dst, src)
}
func (m *Validator_Or) XXX_Size() int {
	return xxx_messageInfo_Validator_Or.Size(m)
}
func (m *Validator_Or) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_Or.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_Or proto.InternalMessageInfo

func (m *Validator_Or) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Validator_Simple struct {
	Claims               map[string]string `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Validator_Simple) Reset()         { *m = Validator_Simple{} }
func (m *Validator_Simple) String() string { return proto.CompactTextString(m) }
func (*Validator_Simple) ProtoMessage()    {}
func (*Validator_Simple) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{2, 2}
}
func (m *Validator_Simple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_Simple.Unmarshal(m, b)
}
func (m *Validator_Simple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_Simple.Marshal(b, m, deterministic)
}
func (dst *Validator_Simple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_Simple.Merge(dst, src)
}
func (m *Validator_Simple) XXX_Size() int {
	return xxx_messageInfo_Validator_Simple.Size(m)
}
func (m *Validator_Simple) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_Simple.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_Simple proto.InternalMessageInfo

func (m *Validator_Simple) GetClaims() map[string]string {
	if m != nil {
		return m.Claims
	}
	return nil
}

type Validator_Constant struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Validator_Constant) Reset()         { *m = Validator_Constant{} }
func (m *Validator_Constant) String() string { return proto.CompactTextString(m) }
func (*Validator_Constant) ProtoMessage()    {}
func (*Validator_Constant) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{2, 3}
}
func (m *Validator_Constant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Validator_Constant.Unmarshal(m, b)
}
func (m *Validator_Constant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Validator_Constant.Marshal(b, m, deterministic)
}
func (dst *Validator_Constant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator_Constant.Merge(dst, src)
}
func (m *Validator_Constant) XXX_Size() int {
	return xxx_messageInfo_Validator_Constant.Size(m)
}
func (m *Validator_Constant) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator_Constant.DiscardUnknown(m)
}

var xxx_messageInfo_Validator_Constant proto.InternalMessageInfo

func (m *Validator_Constant) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type Evaluator struct {
	Parser               *Parser    `protobuf:"bytes,1,opt,name=parser,proto3" json:"parser,omitempty"`
	Validator            *Validator `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Evaluator) Reset()         { *m = Evaluator{} }
func (m *Evaluator) String() string { return proto.CompactTextString(m) }
func (*Evaluator) ProtoMessage()    {}
func (*Evaluator) Descriptor() ([]byte, []int) {
	return fileDescriptor_builder_13cb64dd23e78129, []int{3}
}
func (m *Evaluator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Evaluator.Unmarshal(m, b)
}
func (m *Evaluator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Evaluator.Marshal(b, m, deterministic)
}
func (dst *Evaluator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Evaluator.Merge(dst, src)
}
func (m *Evaluator) XXX_Size() int {
	return xxx_messageInfo_Evaluator.Size(m)
}
func (m *Evaluator) XXX_DiscardUnknown() {
	xxx_messageInfo_Evaluator.DiscardUnknown(m)
}

var xxx_messageInfo_Evaluator proto.InternalMessageInfo

func (m *Evaluator) GetParser() *Parser {
	if m != nil {
		return m.Parser
	}
	return nil
}

func (m *Evaluator) GetValidator() *Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func init() {
	proto.RegisterType((*Parser)(nil), "builder.Parser")
	proto.RegisterMapType((map[string]string)(nil), "builder.Parser.IssuersEntry")
	proto.RegisterType((*Shim)(nil), "builder.Shim")
	proto.RegisterType((*Shim_Elixir)(nil), "builder.Shim.Elixir")
	proto.RegisterType((*Validator)(nil), "builder.Validator")
	proto.RegisterType((*Validator_And)(nil), "builder.Validator.And")
	proto.RegisterType((*Validator_Or)(nil), "builder.Validator.Or")
	proto.RegisterType((*Validator_Simple)(nil), "builder.Validator.Simple")
	proto.RegisterMapType((map[string]string)(nil), "builder.Validator.Simple.ClaimsEntry")
	proto.RegisterType((*Validator_Constant)(nil), "builder.Validator.Constant")
	proto.RegisterType((*Evaluator)(nil), "builder.Evaluator")
}

func init() { proto.RegisterFile("builder.proto", fileDescriptor_builder_13cb64dd23e78129) }

var fileDescriptor_builder_13cb64dd23e78129 = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x9b, 0xa4, 0x3b, 0x9b, 0xbc, 0xb8, 0x28, 0xc3, 0x2a, 0x31, 0xeb, 0xa1, 0x44, 0x96,
	0x5d, 0x3c, 0x04, 0xc9, 0x82, 0x6c, 0x17, 0x3c, 0x6c, 0x4b, 0xa1, 0x3d, 0x55, 0xa6, 0xe0, 0x55,
	0xd2, 0x66, 0xa4, 0x83, 0x69, 0x52, 0x66, 0xd2, 0x62, 0xaf, 0xfe, 0x27, 0xfe, 0x99, 0xde, 0x64,
	0x7e, 0x24, 0x8d, 0x35, 0x82, 0x7b, 0xcb, 0xbc, 0xf7, 0xf9, 0xce, 0x7b, 0x6f, 0xde, 0x37, 0x70,
	0xb1, 0xdc, 0xb1, 0x3c, 0xa3, 0x3c, 0xde, 0xf2, 0xb2, 0x2a, 0xf1, 0xb9, 0x39, 0x46, 0x3f, 0x2d,
	0x40, 0x9f, 0x52, 0x2e, 0x28, 0xc7, 0x6f, 0xe1, 0x4c, 0xac, 0xd9, 0x46, 0x04, 0xd6, 0xc0, 0xb9,
	0xf5, 0x93, 0x8b, 0xb8, 0x96, 0x2c, 0xd6, 0x6c, 0x43, 0x74, 0x0e, 0x7f, 0x80, 0x73, 0x26, 0xc4,
	0x8e, 0x72, 0x11, 0xd8, 0x0a, 0x7b, 0xd3, 0x60, 0xfa, 0x9a, 0x78, 0xa6, 0xd3, 0x93, 0xa2, 0xe2,
	0x07, 0x52, 0xc3, 0xe1, 0x03, 0x3c, 0x6b, 0x27, 0xf0, 0x0b, 0x70, 0xbe, 0xd1, 0x43, 0x60, 0x0d,
	0xac, 0x5b, 0x8f, 0xc8, 0x4f, 0x7c, 0x09, 0x67, 0xfb, 0x34, 0xdf, 0xd1, 0xc0, 0x56, 0x31, 0x7d,
	0x78, 0xb0, 0xef, 0xad, 0x88, 0x42, 0x5f, 0xb6, 0x80, 0x63, 0x40, 0x34, 0x67, 0xdf, 0x19, 0x57,
	0x32, 0x3f, 0xb9, 0xfc, 0xa3, 0xc3, 0x78, 0xa2, 0x72, 0xd3, 0x1e, 0x31, 0x54, 0x78, 0x0d, 0x48,
	0xc7, 0xf0, 0x15, 0x78, 0xab, 0x9c, 0xd1, 0xa2, 0xfa, 0xc2, 0x32, 0x53, 0xd3, 0xd5, 0x81, 0x59,
	0x36, 0x42, 0xd0, 0x97, 0xb3, 0x45, 0xbf, 0x1c, 0xf0, 0x3e, 0xa7, 0x39, 0xcb, 0xd2, 0xaa, 0xe4,
	0xf8, 0x1d, 0x38, 0x69, 0x91, 0x99, 0x4a, 0xaf, 0x9a, 0x4a, 0x0d, 0x10, 0x3f, 0x16, 0xd9, 0xb4,
	0x47, 0x24, 0x84, 0x6f, 0xc0, 0x2e, 0xb9, 0xea, 0xdb, 0x4f, 0x5e, 0x76, 0xa0, 0x73, 0xd9, 0x95,
	0x5d, 0x72, 0x7c, 0x07, 0x48, 0xb0, 0xcd, 0x36, 0xa7, 0x81, 0xa3, 0xe0, 0xd7, 0x1d, 0xf0, 0x42,
	0x01, 0x72, 0x0c, 0x8d, 0xe2, 0x21, 0xb8, 0xab, 0xb2, 0x10, 0x55, 0x5a, 0x54, 0x41, 0x5f, 0xc9,
	0xae, 0x3a, 0x64, 0x63, 0x83, 0x4c, 0x7b, 0xa4, 0xc1, 0xc3, 0x21, 0x38, 0x8f, 0x45, 0x86, 0x13,
	0x80, 0x7d, 0x0d, 0xd6, 0xeb, 0xc5, 0x7f, 0xdf, 0x41, 0x5a, 0x54, 0x78, 0x0f, 0xf6, 0x9c, 0x9f,
	0x28, 0xed, 0xff, 0x52, 0xfe, 0xb0, 0x00, 0xe9, 0x21, 0xf0, 0x47, 0x40, 0xab, 0x3c, 0x3d, 0x7a,
	0xea, 0xfa, 0x9f, 0xf3, 0xc6, 0x63, 0xc5, 0x69, 0xd7, 0x18, 0x51, 0x38, 0x04, 0xbf, 0x15, 0x7e,
	0x8a, 0x67, 0xc2, 0x01, 0xb8, 0xf5, 0x8b, 0x1c, 0x29, 0xa9, 0x74, 0x0d, 0x35, 0xf2, 0xc1, 0x6b,
	0x9a, 0x8e, 0xbe, 0x82, 0x37, 0x91, 0x61, 0xb5, 0xfa, 0x1b, 0x40, 0x5b, 0xe5, 0x65, 0xb3, 0xfd,
	0xe7, 0x27, 0x16, 0x27, 0x26, 0x8d, 0xdf, 0xb7, 0xae, 0x30, 0xeb, 0xef, 0x7a, 0x9c, 0x23, 0xb4,
	0x44, 0xea, 0xf7, 0xbb, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x50, 0x7c, 0xc0, 0x2c, 0x8f, 0x03,
	0x00, 0x00,
}
